{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Bao Nguyen\\\\React-projects\\\\meeting_project\\\\pages\\\\[meetupId]\\\\index.js\";\nimport { useRouter } from \"next/router\";\nimport { MongoClient } from \"mongodb\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\n\nfunction MeetupDetailId(props) {\n  const router = useRouter();\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    img: props.img,\n    title: props.title,\n    address: props.address,\n    description: props.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n} // if you have dynamic pages, you will ned also getStaticPaths() to ensure that every dynamic is pre-render\n\n\nexport async function getStaticPaths(context) {\n  const client = await MongoClient.connect(\"mongodb+srv://quocbao19982009:Qscesz123@cluster0.g9eyr.mongodb.net/meetup?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    // if you define all the page, say yes, if not then say no, the one you define here will be prerender\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  // fetch data for a single meetup\n  const client = await MongoClient.connect(\"mongodb+srv://quocbao19982009:Qscesz123@cluster0.g9eyr.mongodb.net/meetup?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const meetupSelected = await meetupsCollection.find();\n  console.log(\"meetupSelected\", meetupSelected); // To access the ID or parms of the page use: context.params.[dynamic]\n\n  const meetupId = context.params.meetupId;\n  console.log(context);\n  return {\n    props: {\n      img: \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/1280px-Stadtbild_M%C3%BCnchen.jpg\",\n      title: \"First Meetup\",\n      address: \"Some Street 5, Some City\",\n      description: \"This is a first meetup\",\n      id: meetupId\n    }\n  };\n}\nexport default MeetupDetailId;","map":{"version":3,"sources":["C:/Users/Bao Nguyen/React-projects/meeting_project/pages/[meetupId]/index.js"],"names":["useRouter","MongoClient","MeetupDetail","MeetupDetailId","props","router","img","title","address","description","getStaticPaths","context","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","meetupSelected","console","log","id"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,SAASC,WAAT,QAA4B,SAA5B;AACA,OAAOC,YAAP,MAAyB,uCAAzB;;AAEA,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAC7B,QAAMC,MAAM,GAAGL,SAAS,EAAxB;AAEA,sBACE,QAAC,YAAD;AACE,IAAA,GAAG,EAAEI,KAAK,CAACE,GADb;AAEE,IAAA,KAAK,EAAEF,KAAK,CAACG,KAFf;AAGE,IAAA,OAAO,EAAEH,KAAK,CAACI,OAHjB;AAIE,IAAA,WAAW,EAAEJ,KAAK,CAACK;AAJrB;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,C,CAED;;;AAEA,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC5C,QAAMC,MAAM,GAAG,MAAMX,WAAW,CAACY,OAAZ,CACnB,uGADmB,CAArB;AAIA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA3B,EAAuCC,OAAvC,EAAtB;AAEAR,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACLC,IAAAA,QAAQ,EAAE,KADL;AAEL;AACAC,IAAAA,KAAK,EAAEN,OAAO,CAACO,GAAR,CAAaC,MAAD,KAAa;AAC9BC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,QAAQ,EAAEF,MAAM,CAACN,GAAP,CAAWS,QAAX;AAAZ;AADsB,KAAb,CAAZ;AAHF,GAAP;AAOD;AAED,OAAO,eAAeC,cAAf,CAA8BlB,OAA9B,EAAuC;AAC5C;AACA,QAAMC,MAAM,GAAG,MAAMX,WAAW,CAACY,OAAZ,CACnB,uGADmB,CAArB;AAIA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMc,cAAc,GAAG,MAAMf,iBAAiB,CAACG,IAAlB,EAA7B;AACAa,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BF,cAA9B,EAX4C,CAY5C;;AACA,QAAMH,QAAQ,GAAGhB,OAAO,CAACe,MAAR,CAAeC,QAAhC;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAYrB,OAAZ;AAEA,SAAO;AACLP,IAAAA,KAAK,EAAE;AACLE,MAAAA,GAAG,EAAE,wHADA;AAELC,MAAAA,KAAK,EAAE,cAFF;AAGLC,MAAAA,OAAO,EAAE,0BAHJ;AAILC,MAAAA,WAAW,EAAE,wBAJR;AAKLwB,MAAAA,EAAE,EAAEN;AALC;AADF,GAAP;AASD;AAED,eAAexB,cAAf","sourcesContent":["import { useRouter } from \"next/router\";\r\nimport { MongoClient } from \"mongodb\";\r\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\r\n\r\nfunction MeetupDetailId(props) {\r\n  const router = useRouter();\r\n\r\n  return (\r\n    <MeetupDetail\r\n      img={props.img}\r\n      title={props.title}\r\n      address={props.address}\r\n      description={props.description}\r\n    ></MeetupDetail>\r\n  );\r\n}\r\n\r\n// if you have dynamic pages, you will ned also getStaticPaths() to ensure that every dynamic is pre-render\r\n\r\nexport async function getStaticPaths(context) {\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://quocbao19982009:Qscesz123@cluster0.g9eyr.mongodb.net/meetup?retryWrites=true&w=majority\"\r\n  );\r\n\r\n  const db = client.db();\r\n\r\n  const meetupsCollection = db.collection(\"meetups\");\r\n\r\n  const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray();\r\n\r\n  client.close();\r\n\r\n  return {\r\n    fallback: false,\r\n    // if you define all the page, say yes, if not then say no, the one you define here will be prerender\r\n    paths: meetups.map((meetup) => ({\r\n      params: { meetupId: meetup._id.toString() },\r\n    })),\r\n  };\r\n}\r\n\r\nexport async function getStaticProps(context) {\r\n  // fetch data for a single meetup\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://quocbao19982009:Qscesz123@cluster0.g9eyr.mongodb.net/meetup?retryWrites=true&w=majority\"\r\n  );\r\n\r\n  const db = client.db();\r\n\r\n  const meetupsCollection = db.collection(\"meetups\");\r\n\r\n  const meetupSelected = await meetupsCollection.find();\r\n  console.log(\"meetupSelected\", meetupSelected);\r\n  // To access the ID or parms of the page use: context.params.[dynamic]\r\n  const meetupId = context.params.meetupId;\r\n  console.log(context);\r\n\r\n  return {\r\n    props: {\r\n      img: \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/1280px-Stadtbild_M%C3%BCnchen.jpg\",\r\n      title: \"First Meetup\",\r\n      address: \"Some Street 5, Some City\",\r\n      description: \"This is a first meetup\",\r\n      id: meetupId,\r\n    },\r\n  };\r\n}\r\n\r\nexport default MeetupDetailId;\r\n"]},"metadata":{},"sourceType":"module"}