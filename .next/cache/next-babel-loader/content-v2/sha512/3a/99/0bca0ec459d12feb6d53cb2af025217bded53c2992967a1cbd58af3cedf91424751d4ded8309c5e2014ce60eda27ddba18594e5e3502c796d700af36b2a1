{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Bao Nguyen\\\\React-projects\\\\meeting_project\\\\pages\\\\[meetupId]\\\\index.js\";\nimport { useRouter } from \"next/router\";\nimport { MongoClient, ObjectId } from \"mongodb\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\n\nfunction MeetupDetailId(props) {\n  const router = useRouter();\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    img: props.meetupData.img,\n    title: props.meetupData.title,\n    address: props.meetupData.address,\n    description: props.meetupData.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n} // if you have dynamic pages, you will ned also getStaticPaths() to ensure that every dynamic is pre-render\n\n\nexport async function getStaticPaths(context) {\n  const client = await MongoClient.connect(\"mongodb+srv://quocbao19982009:Qscesz123@cluster0.g9eyr.mongodb.net/meetup?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    // if you define all the page, say yes, if not then say no, the one you define here will be prerender\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId; // fetch data for a single meetup\n\n  const client = await MongoClient.connect(\"mongodb+srv://quocbao19982009:Qscesz123@cluster0.g9eyr.mongodb.net/meetup?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const meetupSelected = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId)\n  }); // To access the ID or parms of the page use: context.params.[dynamic]\n\n  client.close();\n  return {\n    props: {\n      meetupData: {\n        img: meetupSelected.image,\n        title: meetupSelected.title,\n        address: meetupSelected.address,\n        description: meetupSelected.description,\n        id: meetupId\n      }\n    }\n  };\n}\nexport default MeetupDetailId;","map":{"version":3,"sources":["C:/Users/Bao Nguyen/React-projects/meeting_project/pages/[meetupId]/index.js"],"names":["useRouter","MongoClient","ObjectId","MeetupDetail","MeetupDetailId","props","router","meetupData","img","title","address","description","getStaticPaths","context","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","meetupSelected","findOne","image","id"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,SAAtC;AACA,OAAOC,YAAP,MAAyB,uCAAzB;;AAEA,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAC7B,QAAMC,MAAM,GAAGN,SAAS,EAAxB;AAEA,sBACE,QAAC,YAAD;AACE,IAAA,GAAG,EAAEK,KAAK,CAACE,UAAN,CAAiBC,GADxB;AAEE,IAAA,KAAK,EAAEH,KAAK,CAACE,UAAN,CAAiBE,KAF1B;AAGE,IAAA,OAAO,EAAEJ,KAAK,CAACE,UAAN,CAAiBG,OAH5B;AAIE,IAAA,WAAW,EAAEL,KAAK,CAACE,UAAN,CAAiBI;AAJhC;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,C,CAED;;;AAEA,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC5C,QAAMC,MAAM,GAAG,MAAMb,WAAW,CAACc,OAAZ,CACnB,uGADmB,CAArB;AAIA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA3B,EAAuCC,OAAvC,EAAtB;AAEAR,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACLC,IAAAA,QAAQ,EAAE,KADL;AAEL;AACAC,IAAAA,KAAK,EAAEN,OAAO,CAACO,GAAR,CAAaC,MAAD,KAAa;AAC9BC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,QAAQ,EAAEF,MAAM,CAACN,GAAP,CAAWS,QAAX;AAAZ;AADsB,KAAb,CAAZ;AAHF,GAAP;AAOD;AAED,OAAO,eAAeC,cAAf,CAA8BlB,OAA9B,EAAuC;AAC5C,QAAMgB,QAAQ,GAAGhB,OAAO,CAACe,MAAR,CAAeC,QAAhC,CAD4C,CAE5C;;AACA,QAAMf,MAAM,GAAG,MAAMb,WAAW,CAACc,OAAZ,CACnB,uGADmB,CAArB;AAIA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMc,cAAc,GAAG,MAAMf,iBAAiB,CAACgB,OAAlB,CAA0B;AACrDZ,IAAAA,GAAG,EAAEnB,QAAQ,CAAC2B,QAAD;AADwC,GAA1B,CAA7B,CAX4C,CAe5C;;AAEAf,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACLlB,IAAAA,KAAK,EAAE;AACLE,MAAAA,UAAU,EAAE;AACVC,QAAAA,GAAG,EAAEwB,cAAc,CAACE,KADV;AAEVzB,QAAAA,KAAK,EAAEuB,cAAc,CAACvB,KAFZ;AAGVC,QAAAA,OAAO,EAAEsB,cAAc,CAACtB,OAHd;AAIVC,QAAAA,WAAW,EAAEqB,cAAc,CAACrB,WAJlB;AAKVwB,QAAAA,EAAE,EAAEN;AALM;AADP;AADF,GAAP;AAWD;AAED,eAAezB,cAAf","sourcesContent":["import { useRouter } from \"next/router\";\r\nimport { MongoClient, ObjectId } from \"mongodb\";\r\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\r\n\r\nfunction MeetupDetailId(props) {\r\n  const router = useRouter();\r\n\r\n  return (\r\n    <MeetupDetail\r\n      img={props.meetupData.img}\r\n      title={props.meetupData.title}\r\n      address={props.meetupData.address}\r\n      description={props.meetupData.description}\r\n    ></MeetupDetail>\r\n  );\r\n}\r\n\r\n// if you have dynamic pages, you will ned also getStaticPaths() to ensure that every dynamic is pre-render\r\n\r\nexport async function getStaticPaths(context) {\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://quocbao19982009:Qscesz123@cluster0.g9eyr.mongodb.net/meetup?retryWrites=true&w=majority\"\r\n  );\r\n\r\n  const db = client.db();\r\n\r\n  const meetupsCollection = db.collection(\"meetups\");\r\n\r\n  const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray();\r\n\r\n  client.close();\r\n\r\n  return {\r\n    fallback: false,\r\n    // if you define all the page, say yes, if not then say no, the one you define here will be prerender\r\n    paths: meetups.map((meetup) => ({\r\n      params: { meetupId: meetup._id.toString() },\r\n    })),\r\n  };\r\n}\r\n\r\nexport async function getStaticProps(context) {\r\n  const meetupId = context.params.meetupId;\r\n  // fetch data for a single meetup\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://quocbao19982009:Qscesz123@cluster0.g9eyr.mongodb.net/meetup?retryWrites=true&w=majority\"\r\n  );\r\n\r\n  const db = client.db();\r\n\r\n  const meetupsCollection = db.collection(\"meetups\");\r\n\r\n  const meetupSelected = await meetupsCollection.findOne({\r\n    _id: ObjectId(meetupId),\r\n  });\r\n\r\n  // To access the ID or parms of the page use: context.params.[dynamic]\r\n\r\n  client.close();\r\n\r\n  return {\r\n    props: {\r\n      meetupData: {\r\n        img: meetupSelected.image,\r\n        title: meetupSelected.title,\r\n        address: meetupSelected.address,\r\n        description: meetupSelected.description,\r\n        id: meetupId,\r\n      },\r\n    },\r\n  };\r\n}\r\n\r\nexport default MeetupDetailId;\r\n"]},"metadata":{},"sourceType":"module"}